
ASUMobiCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000682  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a1  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000272  00000000  00000000  00000e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
	UCSRC = (3 << UCSZ0); //8-bits
}
void UARD_send_char(char data)
{
	while(!(UCSRA & (1 << UDRE)));
	UDR = data;
  6c:	09 2e       	mov	r0, r25
  6e:	00 0c       	add	r0, r0
  70:	aa 0b       	sbc	r26, r26
  72:	bb 0b       	sbc	r27, r27
  74:	88 0f       	add	r24, r24
  76:	99 1f       	adc	r25, r25
  78:	aa 1f       	adc	r26, r26
  7a:	bb 1f       	adc	r27, r27
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	aa 1f       	adc	r26, r26
  82:	bb 1f       	adc	r27, r27
  84:	9c 01       	movw	r18, r24
  86:	ad 01       	movw	r20, r26
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	44 1f       	adc	r20, r20
  8e:	55 1f       	adc	r21, r21
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	44 1f       	adc	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	74 e2       	ldi	r23, 0x24	; 36
  9c:	84 ef       	ldi	r24, 0xF4	; 244
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 66 00 	call	0xcc	; 0xcc <__udivmodsi4>
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	31 09       	sbc	r19, r1
  a8:	29 b9       	out	0x09, r18	; 9
  aa:	30 bd       	out	0x20, r19	; 32
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 bd       	out	0x20, r24	; 32
  b4:	08 95       	ret

000000b6 <UARD_receive_char>:
}
char UARD_receive_char()
{
	while (!(UCSRA & (1 << RXC)));
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <UARD_receive_char>
	return UDR;
  ba:	8c b1       	in	r24, 0x0c	; 12
}
  bc:	08 95       	ret

000000be <main>:
void turnRight();
void turnLeft();

int main(void)
{
	UART_init(9600);
  be:	80 e8       	ldi	r24, 0x80	; 128
  c0:	95 e2       	ldi	r25, 0x25	; 37
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	char R;
	
	while(1)
	{
		R = UARD_receive_char();
  c6:	0e 94 5b 00 	call	0xb6	; 0xb6 <UARD_receive_char>
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <main+0x8>

000000cc <__udivmodsi4>:
  cc:	a1 e2       	ldi	r26, 0x21	; 33
  ce:	1a 2e       	mov	r1, r26
  d0:	aa 1b       	sub	r26, r26
  d2:	bb 1b       	sub	r27, r27
  d4:	fd 01       	movw	r30, r26
  d6:	0d c0       	rjmp	.+26     	; 0xf2 <__udivmodsi4_ep>

000000d8 <__udivmodsi4_loop>:
  d8:	aa 1f       	adc	r26, r26
  da:	bb 1f       	adc	r27, r27
  dc:	ee 1f       	adc	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	a2 17       	cp	r26, r18
  e2:	b3 07       	cpc	r27, r19
  e4:	e4 07       	cpc	r30, r20
  e6:	f5 07       	cpc	r31, r21
  e8:	20 f0       	brcs	.+8      	; 0xf2 <__udivmodsi4_ep>
  ea:	a2 1b       	sub	r26, r18
  ec:	b3 0b       	sbc	r27, r19
  ee:	e4 0b       	sbc	r30, r20
  f0:	f5 0b       	sbc	r31, r21

000000f2 <__udivmodsi4_ep>:
  f2:	66 1f       	adc	r22, r22
  f4:	77 1f       	adc	r23, r23
  f6:	88 1f       	adc	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	1a 94       	dec	r1
  fc:	69 f7       	brne	.-38     	; 0xd8 <__udivmodsi4_loop>
  fe:	60 95       	com	r22
 100:	70 95       	com	r23
 102:	80 95       	com	r24
 104:	90 95       	com	r25
 106:	9b 01       	movw	r18, r22
 108:	ac 01       	movw	r20, r24
 10a:	bd 01       	movw	r22, r26
 10c:	cf 01       	movw	r24, r30
 10e:	08 95       	ret

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
