
ASUMobiCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088d  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000654  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000430  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  00001bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "mdriver.h"
#include <util/delay.h>

int main(void)
{
	UART_init(9600);
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	95 e2       	ldi	r25, 0x25	; 37
  80:	0e 94 22 01 	call	0x244	; 0x244 <UART_init>
	char R;
	
	while(1)
	{
		R = UARD_receive_char();
  84:	0e 94 47 01 	call	0x28e	; 0x28e <UARD_receive_char>
  88:	c8 2f       	mov	r28, r24
		
		if (R == 'F') //Forward
  8a:	86 34       	cpi	r24, 0x46	; 70
  8c:	19 f4       	brne	.+6      	; 0x94 <main+0x18>
		moveForward();
  8e:	0e 94 59 00 	call	0xb2	; 0xb2 <moveForward>
  92:	0a c0       	rjmp	.+20     	; 0xa8 <main+0x2c>
		
		if (R == 'B') //Backward
  94:	82 34       	cpi	r24, 0x42	; 66
  96:	19 f4       	brne	.+6      	; 0x9e <main+0x22>
		moveBackward();
  98:	0e 94 8a 00 	call	0x114	; 0x114 <moveBackward>
  9c:	f3 cf       	rjmp	.-26     	; 0x84 <main+0x8>
		
		if (R == 'R') //Right
  9e:	82 35       	cpi	r24, 0x52	; 82
  a0:	19 f4       	brne	.+6      	; 0xa8 <main+0x2c>
		moveRight();
  a2:	0e 94 bc 00 	call	0x178	; 0x178 <moveRight>
  a6:	ee cf       	rjmp	.-36     	; 0x84 <main+0x8>
		
		if (R == 'L') //Left
  a8:	cc 34       	cpi	r28, 0x4C	; 76
  aa:	61 f7       	brne	.-40     	; 0x84 <main+0x8>
		moveLeft();
  ac:	0e 94 ef 00 	call	0x1de	; 0x1de <moveLeft>
  b0:	e9 cf       	rjmp	.-46     	; 0x84 <main+0x8>

000000b2 <moveForward>:
	BIT_SET(DDR_MOTOR,in3);
	BIT_SET(DDR_MOTOR,in4);
}

void moveForward(){
	BIT_SET(PORT_MOTOR,in1);
  b2:	48 b3       	in	r20, 0x18	; 24
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9c 01       	movw	r18, r24
  ba:	00 90 60 00 	lds	r0, 0x0060	; 0x800060 <_edata>
  be:	02 c0       	rjmp	.+4      	; 0xc4 <moveForward+0x12>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <moveForward+0xe>
  c8:	24 2b       	or	r18, r20
  ca:	28 bb       	out	0x18, r18	; 24
	BIT_CLEAR(PORT_MOTOR,in2);
  cc:	38 b3       	in	r19, 0x18	; 24
  ce:	ac 01       	movw	r20, r24
  d0:	00 90 62 00 	lds	r0, 0x0062	; 0x800062 <in2>
  d4:	02 c0       	rjmp	.+4      	; 0xda <moveForward+0x28>
  d6:	44 0f       	add	r20, r20
  d8:	55 1f       	adc	r21, r21
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <moveForward+0x24>
  de:	24 2f       	mov	r18, r20
  e0:	20 95       	com	r18
  e2:	23 23       	and	r18, r19
  e4:	28 bb       	out	0x18, r18	; 24
	BIT_SET(PORT_MOTOR,in3);
  e6:	48 b3       	in	r20, 0x18	; 24
  e8:	9c 01       	movw	r18, r24
  ea:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <in3>
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <moveForward+0x42>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <moveForward+0x3e>
  f8:	24 2b       	or	r18, r20
  fa:	28 bb       	out	0x18, r18	; 24
	BIT_CLEAR(PORT_MOTOR,in4);
  fc:	28 b3       	in	r18, 0x18	; 24
  fe:	00 90 63 00 	lds	r0, 0x0063	; 0x800063 <in4>
 102:	02 c0       	rjmp	.+4      	; 0x108 <moveForward+0x56>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <moveForward+0x52>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	88 bb       	out	0x18, r24	; 24
 112:	08 95       	ret

00000114 <moveBackward>:
}

void moveBackward(){
	BIT_CLEAR(PORT_MOTOR,in1);
 114:	38 b3       	in	r19, 0x18	; 24
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	ac 01       	movw	r20, r24
 11c:	00 90 60 00 	lds	r0, 0x0060	; 0x800060 <_edata>
 120:	02 c0       	rjmp	.+4      	; 0x126 <moveBackward+0x12>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <moveBackward+0xe>
 12a:	24 2f       	mov	r18, r20
 12c:	20 95       	com	r18
 12e:	23 23       	and	r18, r19
 130:	28 bb       	out	0x18, r18	; 24
	BIT_SET(PORT_MOTOR,in2);
 132:	48 b3       	in	r20, 0x18	; 24
 134:	9c 01       	movw	r18, r24
 136:	00 90 62 00 	lds	r0, 0x0062	; 0x800062 <in2>
 13a:	02 c0       	rjmp	.+4      	; 0x140 <moveBackward+0x2c>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <moveBackward+0x28>
 144:	24 2b       	or	r18, r20
 146:	28 bb       	out	0x18, r18	; 24
	BIT_CLEAR(PORT_MOTOR,in3);
 148:	38 b3       	in	r19, 0x18	; 24
 14a:	ac 01       	movw	r20, r24
 14c:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <in3>
 150:	02 c0       	rjmp	.+4      	; 0x156 <moveBackward+0x42>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <moveBackward+0x3e>
 15a:	24 2f       	mov	r18, r20
 15c:	20 95       	com	r18
 15e:	23 23       	and	r18, r19
 160:	28 bb       	out	0x18, r18	; 24
	BIT_SET(PORT_MOTOR,in4);
 162:	28 b3       	in	r18, 0x18	; 24
 164:	00 90 63 00 	lds	r0, 0x0063	; 0x800063 <in4>
 168:	02 c0       	rjmp	.+4      	; 0x16e <moveBackward+0x5a>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <moveBackward+0x56>
 172:	82 2b       	or	r24, r18
 174:	88 bb       	out	0x18, r24	; 24
 176:	08 95       	ret

00000178 <moveRight>:
}

void moveRight(){
	BIT_CLEAR(PORT_MOTOR,in1);
 178:	38 b3       	in	r19, 0x18	; 24
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	ac 01       	movw	r20, r24
 180:	00 90 60 00 	lds	r0, 0x0060	; 0x800060 <_edata>
 184:	02 c0       	rjmp	.+4      	; 0x18a <moveRight+0x12>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <moveRight+0xe>
 18e:	24 2f       	mov	r18, r20
 190:	20 95       	com	r18
 192:	23 23       	and	r18, r19
 194:	28 bb       	out	0x18, r18	; 24
	BIT_SET(PORT_MOTOR,in2);
 196:	48 b3       	in	r20, 0x18	; 24
 198:	9c 01       	movw	r18, r24
 19a:	00 90 62 00 	lds	r0, 0x0062	; 0x800062 <in2>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <moveRight+0x2c>
 1a0:	22 0f       	add	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <moveRight+0x28>
 1a8:	24 2b       	or	r18, r20
 1aa:	28 bb       	out	0x18, r18	; 24
	BIT_CLEAR(PORT_MOTOR,in3);
 1ac:	38 b3       	in	r19, 0x18	; 24
 1ae:	ac 01       	movw	r20, r24
 1b0:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <in3>
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <moveRight+0x42>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <moveRight+0x3e>
 1be:	24 2f       	mov	r18, r20
 1c0:	20 95       	com	r18
 1c2:	23 23       	and	r18, r19
 1c4:	28 bb       	out	0x18, r18	; 24
	BIT_CLEAR(PORT_MOTOR,in4);
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	00 90 63 00 	lds	r0, 0x0063	; 0x800063 <in4>
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <moveRight+0x5a>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <moveRight+0x56>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret

000001de <moveLeft>:
}

void moveLeft(){
	BIT_CLEAR(PORT_MOTOR,in1);
 1de:	38 b3       	in	r19, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	ac 01       	movw	r20, r24
 1e6:	00 90 60 00 	lds	r0, 0x0060	; 0x800060 <_edata>
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <moveLeft+0x12>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <moveLeft+0xe>
 1f4:	24 2f       	mov	r18, r20
 1f6:	20 95       	com	r18
 1f8:	23 23       	and	r18, r19
 1fa:	28 bb       	out	0x18, r18	; 24
	BIT_CLEAR(PORT_MOTOR,in2);
 1fc:	38 b3       	in	r19, 0x18	; 24
 1fe:	ac 01       	movw	r20, r24
 200:	00 90 62 00 	lds	r0, 0x0062	; 0x800062 <in2>
 204:	02 c0       	rjmp	.+4      	; 0x20a <moveLeft+0x2c>
 206:	44 0f       	add	r20, r20
 208:	55 1f       	adc	r21, r21
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <moveLeft+0x28>
 20e:	24 2f       	mov	r18, r20
 210:	20 95       	com	r18
 212:	23 23       	and	r18, r19
 214:	28 bb       	out	0x18, r18	; 24
	BIT_SET(PORT_MOTOR,in3);
 216:	48 b3       	in	r20, 0x18	; 24
 218:	9c 01       	movw	r18, r24
 21a:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <in3>
 21e:	02 c0       	rjmp	.+4      	; 0x224 <moveLeft+0x46>
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <moveLeft+0x42>
 228:	24 2b       	or	r18, r20
 22a:	28 bb       	out	0x18, r18	; 24
	BIT_CLEAR(PORT_MOTOR,in4);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	00 90 63 00 	lds	r0, 0x0063	; 0x800063 <in4>
 232:	02 c0       	rjmp	.+4      	; 0x238 <moveLeft+0x5a>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <moveLeft+0x56>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	88 bb       	out	0x18, r24	; 24
 242:	08 95       	ret

00000244 <UART_init>:
	UCSRC = (3 << UCSZ0); //8-bits
}
void UARD_send_char(char data)
{
	while(!(UCSRA & (1 << UDRE)));
	UDR = data;
 244:	09 2e       	mov	r0, r25
 246:	00 0c       	add	r0, r0
 248:	aa 0b       	sbc	r26, r26
 24a:	bb 0b       	sbc	r27, r27
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	aa 1f       	adc	r26, r26
 252:	bb 1f       	adc	r27, r27
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	aa 1f       	adc	r26, r26
 25a:	bb 1f       	adc	r27, r27
 25c:	9c 01       	movw	r18, r24
 25e:	ad 01       	movw	r20, r26
 260:	22 0f       	add	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	44 1f       	adc	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	44 1f       	adc	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	74 e2       	ldi	r23, 0x24	; 36
 274:	84 ef       	ldi	r24, 0xF4	; 244
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 4b 01 	call	0x296	; 0x296 <__udivmodsi4>
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	31 09       	sbc	r19, r1
 280:	29 b9       	out	0x09, r18	; 9
 282:	30 bd       	out	0x20, r19	; 32
 284:	88 e1       	ldi	r24, 0x18	; 24
 286:	8a b9       	out	0x0a, r24	; 10
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	80 bd       	out	0x20, r24	; 32
 28c:	08 95       	ret

0000028e <UARD_receive_char>:
}
char UARD_receive_char()
{
	while (!(UCSRA & (1 << RXC)));
 28e:	5f 9b       	sbis	0x0b, 7	; 11
 290:	fe cf       	rjmp	.-4      	; 0x28e <UARD_receive_char>
	return UDR;
 292:	8c b1       	in	r24, 0x0c	; 12
}
 294:	08 95       	ret

00000296 <__udivmodsi4>:
 296:	a1 e2       	ldi	r26, 0x21	; 33
 298:	1a 2e       	mov	r1, r26
 29a:	aa 1b       	sub	r26, r26
 29c:	bb 1b       	sub	r27, r27
 29e:	fd 01       	movw	r30, r26
 2a0:	0d c0       	rjmp	.+26     	; 0x2bc <__udivmodsi4_ep>

000002a2 <__udivmodsi4_loop>:
 2a2:	aa 1f       	adc	r26, r26
 2a4:	bb 1f       	adc	r27, r27
 2a6:	ee 1f       	adc	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	a2 17       	cp	r26, r18
 2ac:	b3 07       	cpc	r27, r19
 2ae:	e4 07       	cpc	r30, r20
 2b0:	f5 07       	cpc	r31, r21
 2b2:	20 f0       	brcs	.+8      	; 0x2bc <__udivmodsi4_ep>
 2b4:	a2 1b       	sub	r26, r18
 2b6:	b3 0b       	sbc	r27, r19
 2b8:	e4 0b       	sbc	r30, r20
 2ba:	f5 0b       	sbc	r31, r21

000002bc <__udivmodsi4_ep>:
 2bc:	66 1f       	adc	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	88 1f       	adc	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	1a 94       	dec	r1
 2c6:	69 f7       	brne	.-38     	; 0x2a2 <__udivmodsi4_loop>
 2c8:	60 95       	com	r22
 2ca:	70 95       	com	r23
 2cc:	80 95       	com	r24
 2ce:	90 95       	com	r25
 2d0:	9b 01       	movw	r18, r22
 2d2:	ac 01       	movw	r20, r24
 2d4:	bd 01       	movw	r22, r26
 2d6:	cf 01       	movw	r24, r30
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
